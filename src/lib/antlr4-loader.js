module.exports = function(source) {
  // Replace Node.js specific code with browser-compatible code
  const modifiedSource = source
    .replace(/var fs = isNodeJs \? require\("fs"\) : null;/, 'var fs = null;')
    .replace(/var fs = require\("fs"\);/, 'var fs = null;')
    .replace(/fs\.readFileSync\([^)]+\)/, '""')
    .replace(/fs\.readFile\([^)]+\)/, 'Promise.resolve("")')
    .replace(/fs\.existsSync\([^)]+\)/, 'false')
    .replace(/fs\.statSync\([^)]+\)/, '{ size: 0 }')
    .replace(/fs\.readdirSync\([^)]+\)/, '[]')
    .replace(/fs\.writeFileSync\([^)]+\)/, '')
    .replace(/fs\.writeFile\([^)]+\)/, 'Promise.resolve()')
    .replace(/fs\.mkdirSync\([^)]+\)/, '')
    .replace(/fs\.mkdir\([^)]+\)/, 'Promise.resolve()')
    .replace(/fs\.unlinkSync\([^)]+\)/, '')
    .replace(/fs\.unlink\([^)]+\)/, 'Promise.resolve()')
    .replace(/fs\.rmdirSync\([^)]+\)/, '')
    .replace(/fs\.rmdir\([^)]+\)/, 'Promise.resolve()')
    .replace(/fs\.renameSync\([^)]+\)/, '')
    .replace(/fs\.rename\([^)]+\)/, 'Promise.resolve()')
    .replace(/fs\.chmodSync\([^)]+\)/, '')
    .replace(/fs\.chmod\([^)]+\)/, 'Promise.resolve()')
    .replace(/fs\.lstatSync\([^)]+\)/, '{ isSymbolicLink: () => false }')
    .replace(/fs\.symlinkSync\([^)]+\)/, '')
    .replace(/fs\.symlink\([^)]+\)/, 'Promise.resolve()')
    .replace(/fs\.readlinkSync\([^)]+\)/, '""')
    .replace(/fs\.readlink\([^)]+\)/, 'Promise.resolve("")')
    .replace(/fs\.realpathSync\([^)]+\)/, '""')
    .replace(/fs\.realpath\([^)]+\)/, 'Promise.resolve("")')
    .replace(/fs\.linkSync\([^)]+\)/, '')
    .replace(/fs\.link\([^)]+\)/, 'Promise.resolve()')
    .replace(/fs\.utimesSync\([^)]+\)/, '')
    .replace(/fs\.utimes\([^)]+\)/, 'Promise.resolve()')
    .replace(/fs\.futimesSync\([^)]+\)/, '')
    .replace(/fs\.futimes\([^)]+\)/, 'Promise.resolve()')
    .replace(/fs\.fsyncSync\([^)]+\)/, '')
    .replace(/fs\.fsync\([^)]+\)/, 'Promise.resolve()')
    .replace(/fs\.fdatasyncSync\([^)]+\)/, '')
    .replace(/fs\.fdatasync\([^)]+\)/, 'Promise.resolve()')
    .replace(/fs\.copyFileSync\([^)]+\)/, '')
    .replace(/fs\.copyFile\([^)]+\)/, 'Promise.resolve()')
    .replace(/fs\.accessSync\([^)]+\)/, '')
    .replace(/fs\.access\([^)]+\)/, 'Promise.resolve()')
    .replace(/fs\.appendFileSync\([^)]+\)/, '')
    .replace(/fs\.appendFile\([^)]+\)/, 'Promise.resolve()')
    .replace(/fs\.truncateSync\([^)]+\)/, '')
    .replace(/fs\.truncate\([^)]+\)/, 'Promise.resolve()')
    .replace(/fs\.watch\([^)]+\)/, '{ close: () => {} }')
    .replace(/fs\.watchFile\([^)]+\)/, '{ stop: () => {} }')
    .replace(/fs\.unwatchFile\([^)]+\)/, '')
    .replace(/fs\.promises\.readFile\([^)]+\)/, 'Promise.resolve("")')
    .replace(/fs\.promises\.writeFile\([^)]+\)/, 'Promise.resolve()')
    .replace(/fs\.promises\.readdir\([^)]+\)/, 'Promise.resolve([])')
    .replace(/fs\.promises\.mkdir\([^)]+\)/, 'Promise.resolve()')
    .replace(/fs\.promises\.rmdir\([^)]+\)/, 'Promise.resolve()')
    .replace(/fs\.promises\.rename\([^)]+\)/, 'Promise.resolve()')
    .replace(/fs\.promises\.chmod\([^)]+\)/, 'Promise.resolve()')
    .replace(/fs\.promises\.lstat\([^)]+\)/, 'Promise.resolve({ isSymbolicLink: () => false })')
    .replace(/fs\.promises\.symlink\([^)]+\)/, 'Promise.resolve()')
    .replace(/fs\.promises\.readlink\([^)]+\)/, 'Promise.resolve("")')
    .replace(/fs\.promises\.realpath\([^)]+\)/, 'Promise.resolve("")')
    .replace(/fs\.promises\.link\([^)]+\)/, 'Promise.resolve()')
    .replace(/fs\.promises\.unlink\([^)]+\)/, 'Promise.resolve()')
    .replace(/fs\.promises\.fchmod\([^)]+\)/, 'Promise.resolve()')
    .replace(/fs\.promises\.chown\([^)]+\)/, 'Promise.resolve()')
    .replace(/fs\.promises\.fchown\([^)]+\)/, 'Promise.resolve()')
    .replace(/fs\.promises\.lchown\([^)]+\)/, 'Promise.resolve()')
    .replace(/fs\.promises\.utimes\([^)]+\)/, 'Promise.resolve()')
    .replace(/fs\.promises\.futimes\([^)]+\)/, 'Promise.resolve()')
    .replace(/fs\.promises\.fsync\([^)]+\)/, 'Promise.resolve()')
    .replace(/fs\.promises\.fdatasync\([^)]+\)/, 'Promise.resolve()')
    .replace(/fs\.promises\.copyFile\([^)]+\)/, 'Promise.resolve()')
    .replace(/fs\.promises\.access\([^)]+\)/, 'Promise.resolve()')
    .replace(/fs\.promises\.appendFile\([^)]+\)/, 'Promise.resolve()')
    .replace(/fs\.promises\.truncate\([^)]+\)/, 'Promise.resolve()');

  return modifiedSource;
}; 